/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package recommendersystem;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Akshay
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public static File [] listOfFiles;
     
    public static KeywordList [] keywordOfFile;
    
    public static String [] stringList;
    public NewJFrame() {
        initComponents();
        jList1.setListData(stringList);
        String [] tempbuffer = {};
        jList2.setListData(tempbuffer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Recommender System");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jLabel2.setText("Select a reseach papers");

        jLabel3.setText("Recommended Papers are");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 123, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:  
        //int index = jList1.getSelectedIndex();
        if(jList1.getValueIsAdjusting())
            return;
        String tempStr = (String)jList1.getSelectedValue();
       // System.out.print("stringLsit "+stringList.length+": keywordofile "+keywordOfFile.length);
        int counter;
        for(counter = 0; counter<stringList.length;counter++)
        {
            if(stringList[counter].equals(tempStr))
                break;
        }
        
        int index = counter;
        calculatescoreOfEachPaper(index);
        sortDocList();
        String [] recoPapers = new String[5];
        for(int i=0;i<5;i++)
        {
            recoPapers[i] = keywordOfFile[i].title;
            System.out.println(i+" "+recoPapers[i] + " score: "+keywordOfFile[i].docScore);
        }
        jList2.setListData(recoPapers);
    }//GEN-LAST:event_jList1ValueChanged

    public void sortDocList()
    {
        for(int i=0;i<keywordOfFile.length;i++)
        {
            for(int j=i+1;j<keywordOfFile.length;j++)
            {
                if(keywordOfFile[i].docScore<keywordOfFile[j].docScore)
                {
                    KeywordList k = new KeywordList(null);
                    k = keywordOfFile[i];
                    keywordOfFile[i] = keywordOfFile[j];
                    keywordOfFile[j] = k;
                }
            }
        }
    }
    public void calculatescoreOfEachPaper(int index)
    {
        for(int i=0;i<keywordOfFile.length;i++)
        {
            keywordOfFile[i].docScore = 0;
        }
        for(int i=0;i<keywordOfFile.length;i++)
        {
            if(i!=index)
            {
                for(int j=0;j<keywordOfFile[i].keywords.size();j++)
                {
                    String temp = keywordOfFile[i].keywords.get(j);
                    if(keywordOfFile[index].keywords.contains(temp))
                    {
                        keywordOfFile[i].docScore += keywordOfFile[i].keywordScore.get(j);
                    }
                }
                    
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String [] exceptions = {"a","an","the","is","are","of","be","been","has","have",
                                          "not","no","yes","go","to","too","gone","went","you","me",
                                          "in","on","and","or","at","will","from","these","those",
                                          "there","their","for","make","it","such","as","with","during",
                                        "being","others","this","that","across","all","by","what","how",
                                "when","where","over","under","should","could","would","therefore","do"
                                ,"moreover","along","its","around","must","also","which","between","yet"
                                ,"now","can","of","however","thus","give","take","they","able","publication",
                                "science","technology","research","information","journal","previous","latest",
                                "conference","IEEE","patent","trend","start","meeting","proceedings","researcher"};
    
       List<String> temp = Arrays.asList(exceptions);
       
       ArrayList<String> keywordExceptionList = new ArrayList<>(temp);
       
        
        // Get the list of files in the folder
        File folder = new File("C:\\Users\\Akshay\\Documents\\NetBeansProjects\\awardsDb");
        listOfFiles = folder.listFiles();
        stringList = new String[listOfFiles.length];
        File keywordFile = new File("C:\\Users\\Akshay\\Documents\\NetBeansProjects\\keywords.txt");
        PrintWriter writer = new PrintWriter(keywordFile);
        keywordOfFile = new KeywordList[listOfFiles.length];
        // find the keywords in each file
        for(int i=0;i<listOfFiles.length;i++)
        {
            //stringList[i] = listOfFiles[i].getName();
            keywordOfFile[i] = new KeywordList(listOfFiles[i].getName());
            writer.print(listOfFiles[i].getName());
            writer.println(":");
            FileInputStream f = new FileInputStream(listOfFiles[i].getAbsolutePath());
            DataInputStream in = new DataInputStream(f);
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            String temp2;
            String tempTitle = "";
            boolean readAbstract = false;
            boolean readTitle = true;
            while((temp2 = reader.readLine())!= null)
            {
                if(temp2.contains("Type"))
                   readTitle = false;
                if(readTitle)
                {
                    temp2.trim();
                    tempTitle = tempTitle+temp2+" ";
                }
                if(readAbstract)
                {
                    //Split the string into words and then check with keywords
                    temp2.trim();
                    String [] tempBuf = temp2.split(" ");
                    for(int j=0;j<tempBuf.length;j++)
                    {
                        tempBuf[j].trim();
                        String toLower = tempBuf[j].toLowerCase();
                        if(!keywordExceptionList.contains(toLower) && !tempBuf[j].equals("\n") && !tempBuf[j].equals(" ") && !tempBuf[j].equals(""))
                        {
                            if(!(keywordOfFile[i].keywords.contains(toLower)))
                            {
                                
                                keywordOfFile[i].keywords.add(toLower);
                                keywordOfFile[i].keywordFrequency.add(1);
                                keywordOfFile[i].keywordDocumentFrequency.add(1);
                                System.out.println(tempBuf[j]);
                                writer.println(tempBuf[j]+" ");
                            }
                            else
                            {
                                int index = keywordOfFile[i].keywords.indexOf(toLower);
                                int count = keywordOfFile[i].keywordFrequency.get(index);
                                count  = count + 1;
                                System.out.println(toLower+ " " + count);
                                keywordOfFile[i].keywordFrequency.set(index, count);
                            }
                            //keyWord.add(tempBuf[j]);
                        }
                    }
                    
                    writer.println();
                    //System.out.println(temp2);
                    //continue;
                }
               if(temp2.contains("Abstract"))
                   readAbstract = true;
            }
            keywordOfFile[i].title = tempTitle;
            stringList[i] = tempTitle;
       }
       writer.close();
       
       //To find the document frequency of each term. Most inefficient part of the algorithm
       for(int i=0;i<keywordOfFile.length;i++)
       {
           for(int j=0;j<keywordOfFile[i].keywords.size();j++)
           {
               String tempBuf = keywordOfFile[i].keywords.get(j);
               int index = keywordOfFile[i].keywords.indexOf(tempBuf);
               for(int k=0;k<keywordOfFile.length;k++)
               {
                   if(k==i)
                       continue;
                   else
                   {
                       if(keywordOfFile[k].keywords.contains(tempBuf))
                       {
                           int docFreq = keywordOfFile[i].keywordDocumentFrequency.get(index);
                           docFreq = docFreq + 1;
                           keywordOfFile[i].keywordDocumentFrequency.set(index, docFreq);
                       }
                   }
               }
           }
       }
       
       //to find the score for each word
       for(int i=0;i<keywordOfFile.length;i++)
       {
           for(int j=0;j<keywordOfFile[i].keywords.size();j++)
           {
               String temp1 = keywordOfFile[i].keywords.get(j);
               int frequency = keywordOfFile[i].keywordFrequency.get(j);
               int docFreq = keywordOfFile[i].keywordDocumentFrequency.get(j);
               double docfr = keywordOfFile.length/docFreq*1.0;
               double score = Math.log(1+frequency)*Math.log(1+docfr);
               keywordOfFile[i].keywordScore.add(j, score);
               System.out.println(temp1+" "+score);
           }
       }
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
